[
  {
    "objectID": "pythonfunctionoftheday.html",
    "href": "pythonfunctionoftheday.html",
    "title": "Python function of the day",
    "section": "",
    "text": "2 random sampling",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python function of the day</span>"
    ]
  },
  {
    "objectID": "pythonfunctionoftheday.html#randn",
    "href": "pythonfunctionoftheday.html#randn",
    "title": "Python function of the day",
    "section": "2.1 randn",
    "text": "2.1 randn\nthe first ever matlab function of the day was on week 1 wednesday and it was matlab’s randn, a function that takes in an array size and returns an array of that size filled with normally distributed random numbers. the python version is numpy.random.randn see the documentation here, but here are some simple examples\n\n2.1.1 generating 5 random numbers\n\nimport numpy as np\nnp.random.randn(5)\n\narray([-0.18388066, -0.94347739,  0.48031835,  0.71313056, -0.98437581])\n\n\n\n\n2.1.2 generating 3x3 array of random numbers\n\nnp.random.randn(3,3)\n\narray([[-1.6076068 , -0.72436386,  0.02306269],\n       [-0.30266487, -1.69976604, -1.71430111],\n       [ 1.48505028, -2.24632212, -0.22461656]])",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python function of the day</span>"
    ]
  },
  {
    "objectID": "pythonfunctionoftheday.html#rand",
    "href": "pythonfunctionoftheday.html#rand",
    "title": "Python function of the day",
    "section": "2.2 rand",
    "text": "2.2 rand\nthe second ever matlab function of the day was rand, which takes in array dimensions and returns an array of that size with samples from the uniform distribution between 0 and 1. the python version of this is numpy.random.rand which is functionally the same. see documentation\n\n2.2.1 generating 3 random numbers\n\nnp.random.rand(3)\n\narray([0.85167858, 0.07401149, 0.95162213])\n\n\n\n\n2.2.2 generating 5x3 array of random numbers\n\nnp.random.rand(5,3)\n\narray([[0.7883434 , 0.70033573, 0.80708999],\n       [0.63865275, 0.15007854, 0.65802218],\n       [0.03925671, 0.70635119, 0.09628135],\n       [0.16424599, 0.32556874, 0.07374301],\n       [0.32625414, 0.95422693, 0.81012482]])",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python function of the day</span>"
    ]
  },
  {
    "objectID": "pythonfunctionoftheday.html#randi",
    "href": "pythonfunctionoftheday.html#randi",
    "title": "Python function of the day",
    "section": "2.3 randi",
    "text": "2.3 randi\non week 3 friday the matlab function of the day was randi, which generates a random integer between 1 and the first parameter imax. the closest python function to this is numpy.random.randint which takes in a low, high, and array size (as a tuple!!!!) instead of just taking imax. see documentation\n\n\n\n\n\n\nNote\n\n\n\nThe interval for the pseudorandom integers is \\([\\mathrm{low}, \\mathrm{high})\\)\n\n\n\n2.3.1 generating 3 pseudorandom integers between 0 and 100\nreally [0,100)\n\nnp.random.randint(0,100,3)\n\narray([85, 20,  0])\n\n\n\n\n2.3.2 generating a 3x3 array of pseudorandom integers between 5 and 10\nmore specifically [5,10)\n\nnp.random.randint(5,10,(3,3))\n\narray([[6, 6, 9],\n       [5, 8, 8],\n       [6, 9, 6]])",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python function of the day</span>"
    ]
  },
  {
    "objectID": "pythonfunctionoftheday.html#binopdf",
    "href": "pythonfunctionoftheday.html#binopdf",
    "title": "Python function of the day",
    "section": "3.1 binopdf",
    "text": "3.1 binopdf\non week 4 friday, binopdf was introduced (during everyone’s favorite reoccuring segment). this is the first funciton where we will start using scipy functions, specifically scipy.stats.binom.pmf. see scipy stats documentation for more distributions and info\n\n\n\n\n\n\nNote\n\n\n\nsince the binomial distribution is discrete, the method called here is pmf (probability mass function). scipy is set up in a delicious fashion so the discrete distributions have pmf and the continuous have pdf (probability distribution function).\n\n\n\n3.1.1 probability of getting exactly 3 successes out of 3 trials with 50% success\n\nfrom scipy.stats import binom\nbinom.pmf(3, 3, 0.5)\n\n0.125\n\n\n\n\n3.1.2 probability of getting 30 successes out of 300 trials with 10% success\n\nbinom.pmf(30, 300, 0.10)\n\n0.0765611504406652",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python function of the day</span>"
    ]
  },
  {
    "objectID": "pythonfunctionoftheday.html#other-discrete-distributions",
    "href": "pythonfunctionoftheday.html#other-discrete-distributions",
    "title": "Python function of the day",
    "section": "3.2 other discrete distributions",
    "text": "3.2 other discrete distributions\na good reference here is the scipy stats documentation. it acknowledges its limitations, but it has everything needed in cheg304 and more\n\n\n\nDistribution\nScipy\n\n\n\n\nbernoulli\nbernoulli\n\n\nbinomial\nbinom\n\n\ngeometric\ngeom\n\n\nhypergeometric\nhypergeom\n\n\nnegative binomial\nnbinom\n\n\npoisson\npoisson\n\n\nuniform\nrandint\n\n\n\n\n3.2.1 probability of getting out of jail in monopoly\nquestion 2 from spring 2025 cheg304 exam 1. we can do this with the negative binomial or geometric distribution.\n\n\n\n\n\n\nWarning\n\n\n\nscipy swaps the parameters of the negative binomial! for scipy, \\(k\\) is the number of failures and \\(n\\) is the number of successes.\n\n\\(n\\) is the number of sucesses\n\\(k\\) is the number of failures\n\nhere’s the pmf that scipy is actually evaluating\n\\[\nf(k) = {k+n-1 \\choose n-1} p^n (1-p)^k\n\\]\nthis is the same as in table 8.6, but using \\(k\\) instead of \\(x\\) and \\(n\\) instead of \\(k\\)\n\n\nfor this, \\(p = \\frac{1}{6}, k=(0,1,2), n=1\\) (in scipy’s notation)\n\nfrom scipy.stats import nbinom\nnbinom.pmf(k=[0,1,2], n=1, p=1/6).sum()\n\n0.4212962962962961\n\n\ncan also use the geometric! this is scipy’s geometric pmf\n\\[\nf(k) = (1-p)^{k-1}p\n\\]\n\nfrom scipy.stats import geom\ngeom.pmf(k=[1,2,3], p=1/6).sum()\n\n0.42129629629629634",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python function of the day</span>"
    ]
  },
  {
    "objectID": "pythonfunctionoftheday.html#sum",
    "href": "pythonfunctionoftheday.html#sum",
    "title": "Python function of the day",
    "section": "4.1 sum",
    "text": "4.1 sum\nthe python version of sum is numpy.sum (very surprising). this works with lists or series or arrays.\n\nnp.sum([3,4,5])\n\n12",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python function of the day</span>"
    ]
  },
  {
    "objectID": "pythonfunctionoftheday.html#mean",
    "href": "pythonfunctionoftheday.html#mean",
    "title": "Python function of the day",
    "section": "4.2 mean",
    "text": "4.2 mean\nthe python version of mean is numpy.mean\n\nnp.mean([3,8,12,19])\n\n10.5",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python function of the day</span>"
    ]
  },
  {
    "objectID": "pythonfunctionoftheday.html#median",
    "href": "pythonfunctionoftheday.html#median",
    "title": "Python function of the day",
    "section": "4.3 median",
    "text": "4.3 median\nfor median use numpy.median\n\nnp.median([14, 15, 16, 17, 100000])\n\n16.0",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python function of the day</span>"
    ]
  },
  {
    "objectID": "pythonfunctionoftheday.html#mode",
    "href": "pythonfunctionoftheday.html#mode",
    "title": "Python function of the day",
    "section": "4.4 mode",
    "text": "4.4 mode\nyou’d think numpy.mode, but actually this just does not exist. we need to use scipy.stats.mode\n\nfrom scipy.stats import mode\nmode([3,4,4,4,4,100000])\n\nModeResult(mode=4, count=4)\n\n\nyou can access just the value of the mode (as int, instead of the result output) with the .mode method\n\nmode([3,4,4,4,4,100000]).mode\n\n4",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python function of the day</span>"
    ]
  },
  {
    "objectID": "pythonfunctionoftheday.html#std",
    "href": "pythonfunctionoftheday.html#std",
    "title": "Python function of the day",
    "section": "4.5 std",
    "text": "4.5 std\nuse numpy.std\n\n\n\n\n\n\nNote\n\n\n\nyou’ll likely want to set ddof=1 to calculate the sample standard deviation. using \\(n-1\\) instead of \\(n\\) is called bessel’s correction.\n\n\n\nnp.std([3,4,5,5,5,6,6,50], ddof=1)\n\n15.991068935949395",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python function of the day</span>"
    ]
  },
  {
    "objectID": "pythonfunctionoftheday.html#zscore",
    "href": "pythonfunctionoftheday.html#zscore",
    "title": "Python function of the day",
    "section": "4.6 zscore",
    "text": "4.6 zscore\nwhich is really a poor name since these are really t-statistics (they’re using a sample mean and sample standard deviation!!!!). again we need to fall back onto scipy and use scipy.stats.zscore\n\n\n\n\n\n\nNote\n\n\n\nyou’ll likely want to set ddof=1 here, too.\n\n\n\nfrom scipy.stats import zscore\nzscore([3,5,5,6,6,9], ddof=1)\n\narray([-1.35612701, -0.33903175, -0.33903175,  0.16951588,  0.16951588,\n        1.69515876])",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python function of the day</span>"
    ]
  },
  {
    "objectID": "pythonfunctionoftheday.html#min",
    "href": "pythonfunctionoftheday.html#min",
    "title": "Python function of the day",
    "section": "4.7 min",
    "text": "4.7 min\nuse numpy.min\n\nnp.min([3,5,5,5,0,7,2,3,1,100])\n\n0",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python function of the day</span>"
    ]
  },
  {
    "objectID": "pythonfunctionoftheday.html#max",
    "href": "pythonfunctionoftheday.html#max",
    "title": "Python function of the day",
    "section": "4.8 max",
    "text": "4.8 max\nuse numpy.max\n\nnp.max([3,6,1,4,1e6,1,6])\n\n1000000.0",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python function of the day</span>"
    ]
  },
  {
    "objectID": "pythonfunctionoftheday.html#range",
    "href": "pythonfunctionoftheday.html#range",
    "title": "Python function of the day",
    "section": "4.9 range",
    "text": "4.9 range\nuse numpy.ptp. if you’re wondering what ptp stands for, it means peak to peak.\ndocumentation\n\nnp.ptp([3,6,100])\n\n97",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python function of the day</span>"
    ]
  },
  {
    "objectID": "pythonfunctionoftheday.html#quantile",
    "href": "pythonfunctionoftheday.html#quantile",
    "title": "Python function of the day",
    "section": "4.10 quantile",
    "text": "4.10 quantile\nuse numpy.quantile\ndocumentation\n\n4.10.1 the 95th percentile of 50000 samples from z distribution\n\nvector = np.random.randn(50000)\nnp.quantile(vector, 0.95)\n\n1.643512194841922",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python function of the day</span>"
    ]
  },
  {
    "objectID": "pythonfunctionoftheday.html#skewness-kurtosis",
    "href": "pythonfunctionoftheday.html#skewness-kurtosis",
    "title": "Python function of the day",
    "section": "4.11 skewness, kurtosis",
    "text": "4.11 skewness, kurtosis\nuse scipy.stats.skew and scipy.stats.kurtosis (or don’t)\n\n4.11.1 skew and kurtosis of 5000 samples from z distribution\n\nfrom scipy.stats import skew\nskew(vector)\n\n0.00021570560758344632\n\n\n\nfrom scipy.stats import kurtosis\nkurtosis(vector)\n\n-0.0038758211332297066",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python function of the day</span>"
    ]
  },
  {
    "objectID": "pythonfunctionoftheday.html#probability-density",
    "href": "pythonfunctionoftheday.html#probability-density",
    "title": "Python function of the day",
    "section": "5.1 probability density",
    "text": "5.1 probability density\n\n5.1.1 probability density at \\(t=1.2\\) for 10 dof\n\nfrom scipy.stats import t\nt.pdf(1.2, 10)\n\n0.1856638936267032\n\n\n\n\n5.1.2 probability density at \\(\\chi^2=20\\) for 20 dof\n\nfrom scipy.stats import chi2\nchi2.pdf(20, 20)\n\n0.06255501786056658",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python function of the day</span>"
    ]
  },
  {
    "objectID": "pythonfunctionoftheday.html#cumulative-density",
    "href": "pythonfunctionoftheday.html#cumulative-density",
    "title": "Python function of the day",
    "section": "5.2 cumulative density",
    "text": "5.2 cumulative density\nuse the cdf method as mentioned earlier\n\n\n\n\n\n\nNote\n\n\n\nlet \\(f(x)\\) be the probability density function of random variable \\(x\\). for variables that may take on negative values (norm, t), the value of scipy’s cdf is\n\\[\n\\mathrm{cdf(a)} = \\int_{-\\infty}^a f(x) dx\n\\]\nfor variables that are strictly positive (F, \\(\\chi^2\\))\n\\[\n\\mathrm{cdf(a)} = \\int_{0}^a f(x) dx\n\\]\nthis consistency is nice, but it is easy to get confused and use \\(\\chi^2\\) wrong since enszer’s table is set up the other way\n\n\n\n5.2.1 cumulative density for \\(z=1.0\\)\n\nfrom scipy.stats import norm\nnorm.cdf(1)\n\n0.8413447460685429\n\n\n\n\n5.2.2 cumulative density for \\(F=1.5\\), dfn=10, dfd=8\n\nfrom scipy.stats import f\nf.cdf(1.5, 10, 8)\n\n0.7110457163218693",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python function of the day</span>"
    ]
  },
  {
    "objectID": "pythonfunctionoftheday.html#inverse-functions",
    "href": "pythonfunctionoftheday.html#inverse-functions",
    "title": "Python function of the day",
    "section": "5.3 inverse functions",
    "text": "5.3 inverse functions\nas mentioned earlier, the ppf method gets the inverse cdf for all of these distributions\n\n5.3.1 critical t value at \\(\\alpha=0.05\\), 1E6 dof\nfor 2-sided so the result looks familiar\n\nfrom scipy.stats import t\nt.ppf(0.05/2, 1e6)\n\n-1.959966356814107\n\n\n\n\n5.3.2 critical \\(\\chi^2\\) for \\(\\alpha=0.05\\), 29 dof\n\nfrom scipy.stats import chi2\nchi2.ppf(0.05, 29)\n\n17.70836618282458",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python function of the day</span>"
    ]
  },
  {
    "objectID": "pythonfunctionoftheday.html#anova1",
    "href": "pythonfunctionoftheday.html#anova1",
    "title": "Python function of the day",
    "section": "7.1 anova1",
    "text": "7.1 anova1\non week 9 friday, matlab’s anova1 was introduced. one of the python versions of this is scipy.stats.f_oneway see the documentation here\nif the starting data is just a 5x5 array (like the next example) a little bit of wrangling will need to be done. we want an array with the 5 replicates of each treatment, which means we will need separate arrays for each column. this is why you see me take the transpose of the given 5x5 table and assign each of those rows (which were previously columns) to a variable\n\n7.1.1 one-way anova example problem\nas plucked from week 9 wednesday slide 32\n\nfrom scipy.stats import f_oneway\n\narray = np.array([\n    [1.5377, 0.6923, 1.6501, 3.7950, 5.6715],\n    [2.8339, 1.5664, 6.0349, 3.8759, 3.7925],\n    [-1.2588, 2.3426, 3.7254, 5.4897, 5.7172],\n    [1.8622, 5.5784, 2.9369, 5.4090, 6.6302],\n    [1.3188, 4.7694, 3.7147, 5.4172, 5.4889]\n])\n\nx1, x2, x3, x4, x5 = array.T\n\nf_oneway(x1, x2, x3, x4, x5) # each treatment in separate list!!\n\nF_onewayResult(statistic=6.048813360919241, pvalue=0.002332160487732741)\n\n\nsimilar to regression functions, this returns a non-primative type (not a string, int, float, bool). the methods .statistic and .pvalue will give you access to the F statistic and p-value as float values.\n\np = f_oneway(x1, x2, x3, x4, x5).pvalue \np, type(p)\n\n(0.002332160487732741, numpy.float64)\n\n\nand thats a beautiful float.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python function of the day</span>"
    ]
  },
  {
    "objectID": "pythonfunctionoftheday.html#n-way-anova",
    "href": "pythonfunctionoftheday.html#n-way-anova",
    "title": "Python function of the day",
    "section": "7.2 n-way anova",
    "text": "7.2 n-way anova\nfor transitioning to n-way anova, it will be useful to start using pingouin and storing our data as DataFrame types (pandas. a data frame is synonomous to a table in Excel. columns may be called by a name and there are really convinient helper functions to rearrange your table.\n\n\n\n\n\n\nWarning\n\n\n\nanaconda installations do not come with pingouin! install it with the following commands\nconda activate base\nconda install pingouin -c conda-forge\n\n\n\n7.2.1 one-way anova example problem with pingouin\nI use the .melt() method here to turn the table from 5x5 to 25x2 where each row is an individual trial, column 1 is the treatment (the original column), and column 2 is the value.\n\nimport pandas as pd\nimport pingouin \n\ndf = pd.DataFrame(array)\ndf = df.melt() \ndf.anova(dv='value', between='variable')\n\n\n\n\n\n\n\n\nSource\nddof1\nddof2\nF\np-unc\nnp2\n\n\n\n\n0\nvariable\n4\n20\n6.048813\n0.002332\n0.547463\n\n\n\n\n\n\n\nthis way was super super easy (if you are aware of the .melt() helper), and it expands really nicely to n-way anova\n\n\n7.2.2 3-way anova example with pingouin\nagain, the data needs wrangled into an appropriate form where each row is a single trial. for convenience i loaded in the data as a txt file. small note: this data is from spring 2029 homework 9 question 1.\n\ndf = pd.read_csv('dat.txt', sep=' ')\ndf = df.melt(id_vars=['a', 'b', 'c'], \n            value_vars=['rate1', 'rate2'],\n            var_name='replicate', \n            value_name='rate').drop(columns=['replicate'])\ndf.head(3)\n\n\n\n\n\n\n\n\na\nb\nc\nrate\n\n\n\n\n0\n-1\n-1\n-1\n0.55\n\n\n1\n1\n-1\n-1\n0.60\n\n\n2\n-1\n1\n-1\n0.37\n\n\n\n\n\n\n\nnow it’s a similar process to 1 way\n\nspecify the dependent variable, dv\nspecify the columns for ANOVA, between\n\n\ndf.anova(dv='rate', between=['a', 'b', 'c'])\n\n\n\n\n\n\n\n\nSource\nSS\nDF\nMS\nF\np-unc\nnp2\n\n\n\n\n0\na\n0.008556\n1.0\n0.008556\n1.571757\n0.245347\n0.164208\n\n\n1\nb\n0.158006\n1.0\n0.158006\n29.025258\n0.000656\n0.783931\n\n\n2\nc\n0.001056\n1.0\n0.001056\n0.194030\n0.671243\n0.023679\n\n\n3\na * b\n0.002256\n1.0\n0.002256\n0.414466\n0.537726\n0.049256\n\n\n4\na * c\n0.002256\n1.0\n0.002256\n0.414466\n0.537726\n0.049256\n\n\n5\nb * c\n0.000306\n1.0\n0.000306\n0.056257\n0.818474\n0.006983\n\n\n6\na * b * c\n0.000506\n1.0\n0.000506\n0.092997\n0.768185\n0.011491\n\n\n7\nResidual\n0.043550\n8.0\n0.005444\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\n\n\n7.2.3 2-way anova in class example\nthis is from week 9 friday slide 13.\n\ndata = np.array([\n    [[86.8, 82.4, 86.7, 83.5], [93.4, 85.2, 94.8, 83.1], [77.9, 89.6, 89.9, 83.7]],\n    [[71.9, 72.1, 80.0, 77.4], [74.5, 87.1, 71.9, 84.1], [87.5, 82.7, 78.3, 90.1]],\n    [[65.5, 72.4, 76.6, 66.7], [66.7, 77.1, 76.7, 86.1], [72.7, 77.8, 83.5, 78.8]],\n    [[63.9, 70.4, 77.2, 81.2], [73.7, 81.6, 84.2, 84.9], [79.8, 75.7, 80.5, 72.9]]\n])\n\ncatalysts = ['A', 'B', 'C', 'D']\ntemperatures = ['r1', 'r2', 'r3']\nall_data = []\n\nfor i, catalyst in enumerate(catalysts):\n    for j, temp in enumerate(temperatures):\n        for replicate in data[i][j]:\n            all_data.append({\n                'Catalyst': catalyst,\n                'Temperature': temp,\n                'Value': replicate\n            })\n\ndf = pd.DataFrame(all_data)\ndf.head(3)\n\n\n\n\n\n\n\n\nCatalyst\nTemperature\nValue\n\n\n\n\n0\nA\nr1\n86.8\n\n\n1\nA\nr1\n82.4\n\n\n2\nA\nr1\n86.7\n\n\n\n\n\n\n\nyes, this is the same exact way you’d need to manipulate the table to use minitab, too.\n\ndf.anova(dv='Value', between=['Catalyst', \"Temperature\"])\n\n\n\n\n\n\n\n\nSource\nSS\nDF\nMS\nF\np-unc\nnp2\n\n\n\n\n0\nCatalyst\n877.563333\n3\n292.521111\n9.357931\n0.000104\n0.438148\n\n\n1\nTemperature\n327.140417\n2\n163.570208\n5.232712\n0.010118\n0.225230\n\n\n2\nCatalyst * Temperature\n156.982917\n6\n26.163819\n0.836997\n0.549603\n0.122422\n\n\n3\nResidual\n1125.330000\n36\n31.259167\nNaN\nNaN\nNaN",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python function of the day</span>"
    ]
  },
  {
    "objectID": "pythonfunctionoftheday.html#k-means",
    "href": "pythonfunctionoftheday.html#k-means",
    "title": "Python function of the day",
    "section": "8.1 k-means",
    "text": "8.1 k-means\ni’ll include a quick k-means clustering example. i’ll generate some data that should have 3 clusters on an xy plane.\n\nimport matplotlib.pyplot as plt\n\nn_points = 50 \ncluster1 = 1.8*np.random.randn(n_points, 2) + np.array([0, 0])\ncluster2 = 0.5*np.random.randn(n_points, 2) + np.array([5, 10])\ncluster3 = np.random.randn(n_points, 2) + np.array([0, 5])\nX = np.vstack([cluster1, cluster2, cluster3])\n\nfig, ax = plt.subplots(dpi=300)\nax.scatter(X[:n_points, 0], X[:n_points, 1], label='Cluster 1')\nax.scatter(X[n_points:2*n_points, 0], X[n_points:2*n_points, 1], label='Cluster 2')\nax.scatter(X[2*n_points:, 0], X[2*n_points:, 1], label='Cluster 3')\nax.set(title='Generated Data w/ 3 Clusters', xlabel='$x_1$', ylabel='$x_2$')\nplt.legend();\n\n\n\n\n\n\n\n\nnow importing the appropriate k-means function from sklearn. you may be thinking why does this take in a random state and the answer is that the points where the centroids are initiated are chosen randomly. this random initialization is also why k-means implimentations will usually take in a parameter to say how many random initializations you want to do (since you only ever converge to a local minimum each initialization)\n\nfrom sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters=3, random_state=0, n_init=100).fit(X)\n\nfig, ax = plt.subplots(dpi=300)\nplt.scatter(X[:,0], X[:,1], c=kmeans.labels_)\nax.set(title='$k$-means clustered Data w/ 3 Clusters', xlabel='$x_1$', ylabel='$x_2$');\n\n\n\n\n\n\n\n\nfor this highly idealized data we do an okay job at clustering with the simple and computationally inexpensive k-means!",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python function of the day</span>"
    ]
  },
  {
    "objectID": "pythonfunctionoftheday.html#numerical-solving",
    "href": "pythonfunctionoftheday.html#numerical-solving",
    "title": "Python function of the day",
    "section": "9.1 numerical solving",
    "text": "9.1 numerical solving\nsome useful functions can be found in scipy.optimize. namely, fsolve (functionally equivalent to matlab’s fsolve) and least_squares which is easier to understand how it works and able to bound solutions.\n\n9.1.1 numerical solving example\nfrom cheg304 spring 2025 homework 6:\n\nhow many samples need taken for 95% confidence interval to be \\(\\pm 1\\), \\(s=9\\)\n\nfor this question, we need to iteratively solve this equation for \\(n\\)\n\\[\n1 = t(0.025, n-1) \\frac{s}{\\sqrt{n}}\n\\]\n\nfrom scipy.optimize import fsolve\nfrom scipy.stats import t\n\nalpha = 0.05\ns = 9\n\ndef func(n):\n    return 1 - t.ppf(1-alpha/2, n-1) * s / np.sqrt(n)\n\nn = fsolve(func, 10)[0]\nprint(f'n: {n:.0f}')\n\nn: 314",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python function of the day</span>"
    ]
  },
  {
    "objectID": "pythonfunctionoftheday.html#visualization",
    "href": "pythonfunctionoftheday.html#visualization",
    "title": "Python function of the day",
    "section": "9.2 visualization",
    "text": "9.2 visualization\nnearly all python visualizations will use matplotlib in one way or another. the best resource i know is Nicholas Rougiers’s python visualization book which is free on github.\n\n9.2.1 rejection region visualization\nfrom homework 6 question 1. this is a nice example because it uses pdf functions from scipy, sets up two axes in one figure, and uses fill_between to fill the rejection regions\n\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\n\n# set up a little helper function!\ndef plot_normal_with_rejection(ax, mean, std, n, reference_mean, hatch='////'):\n    low, high = mean - 5*std, mean + 5*std\n    x = np.linspace(low, high, 1000)\n    y = norm.pdf(x, reference_mean, std)\n\n    ax.plot(x, y, label='_nolegend_')\n\n    crit = 3 * std / n\n    for direction in [-1, 1]:\n        x_fill = np.linspace(mean + direction * crit, high if direction &gt; 0 else low, 1000)\n        y_fill = norm.pdf(x_fill, reference_mean, std)\n        ax.fill_between(x_fill, y_fill, alpha=0.2, hatch=hatch)\n\n    ax.set(ylim=0)\n    ax.set_yticks([])\n\nmean, std, n = 10, 0.10, 4\nactual_mean = 10.1\n\nfig, (a, b) = plt.subplots(2, 1, dpi=300, figsize=(8, 6))\n\nplot_normal_with_rejection(a, mean, std, n, mean)\nplot_normal_with_rejection(b, mean, std, n, actual_mean)\n\na.legend(['lower rejection region', 'upper rejection region'], loc='upper left')\nb.legend(['lower rejection region', 'upper rejection region'], loc='upper left');",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Python function of the day</span>"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CHEG 304 Python",
    "section": "",
    "text": "Preface\nEveryone loves the reoccurring matlab function of the day segment of CHEG304. sadly, matlab is paid, ancient, and a massive pain to get your company to give you a license for when you’re in industry. I humbly present all the matlab function of the days as python function of the days.\nThis is a Quarto book. To learn more about Quarto books visit https://quarto.org/docs/books.",
    "crumbs": [
      "Preface"
    ]
  }
]